<caption>
CRUD フィルター      
</caption>
<preamble>
ENG_vf_um052_Filter_Blind_One.htm
</preamble>
<context>
Filter 
</context>
<mode>
ONE
</mode>
<sequence>
000100  
</sequence>
<handlertxt>
Specify the physical file that your business object is to be based on.  Then choose which fields to show on the instance list and which field / fields uniquely identify a record.    
その他、必要なオプションを選択します。 
</handlertxt>
<handler>
VF_UM128 
VF_UM109 
</handler>
<hint>
このウィザードはフィルター用のコードを生成し、指定のファイルやビューに基づく少々の手作業を必要とするか、もしくは全くの手作業なしで完成することができます。VL フレームワークの初心者である開発者向けに設計されています。
</hint>
<code>
<<include VF_UM052_Filter_Preamble.vfi>>
Function Options(*DIRECT)
Begin_Com Role(*EXTENDS #VF_AC007O) Height(182) Width(326) 
* <<majorsep>>
* 簡単なフィールド、グループ、条件の定義
* <<majorsep>>
Group_By   Name(#XG_Ident)   Fields(<<UM055_GenFldList>>)
Group_By   Name(#XG_Keys)   Fields(<<UM055_BaseFileKeys>>)

* ファイルにアクセスするサービス モジュールからのデータ受信に使用するリスト 
Def_List Name(#<<UM055_BaseFile>>List) Counter(#ListCount) Type(*Working) Entrys(*Max) <<UM055_BaseFileFields>> 

* <<majorsep>>
* ルーチン
* <<majorsep>>

<<CommentBlock>>
Mthroutine Name(uInitialize) Options(*Redefine)
* データ サービスの定義
Define_Com Class(#<<UM055_BaseFileWAM>>.FindAll) Name(#FindAll)

* これを非表示のフィルターに
Set Com(#Com_Owner) Avfilterlocation(NONE)
* 非表示のフィルターの上下、左右への移動を禁止
Set Com(#Com_Owner) Avallowlocationchange(False)


* ビジー状態に移行
#COM_OWNER.avGotoBusyState Showbusytext('Searching') Animated(False)


* サービス モジュール <<UM055_BaseFileWAM>> にサーバーからの全データ取得を指示
#XG_Keys := *NULL
#FindAll.ExecuteAsync( #<<UM055_BaseFile>>List )

Evtroutine Handling(#FindAll.Completed)

#avListManager.ClearList

Selectlist Named(#<<UM055_BaseFile>>List)

* その他の選択ロジックをここに記述

<<UM055_AddtoList>>  

Endselect
Clr_List Named(#<<UM055_BaseFile>>List)

* フリー状態の表示に戻る
#com_Owner.avGotoFreeState

Endroutine
Endroutine

<<if CA_UM109_TERMINATE>>
Mthroutine Name(uTerminate) Options(*REDEFINE)
<<CommentBlock>>
* <独自の終了ロジックをここに記述>
* <独自の終了ロジックをここに記述>
* <独自の終了ロジックをここに記述>
<<CommentBlock>>
<<Comment>>先祖で定義された終了処理を行う
#Com_Ancestor.uTerminate
<<CommentBlock>>
Endroutine
<<endif>>

<<if CA_UM109_LISTEN>>
* <<minorsep>>
* インスタンス リスト更新の外部からの要求を処理  
* <<minorsep>>
EvtRoutine #Com_owner.avEvent WithId(#EventId) WithAInfo1(#AInfo1) WithAInfo2(#AInfo2) WithAInfo3(#AInfo3) WithAInfo4(#AInfo4) WithAInfo5(#AInfo5)  WithNInfo1(#NInfo1) WithNInfo2(#NInfo2) WithNInfo3(#NInfo3) WithNInfo4(#NInfo4) WithNInfo5(#NInfo5)

* 受信した値をフィールドに入れる
#vf_elIdn := #EventId.Value

* AInfo をマップし、NInfo 値をキー フィールドへ引き渡す - <<UM055_BaseFileKeys>>
<<UM055_GenMapKeys>> 

Case #vf_elIDN

when value_is(= Refresh_Instance_List)
* インスタンス リストの再読み込み

#Com_Owner.uInitialize

when value_is(= Add_List_Entry)
* リスト ビューにエントリーを追加

* <ロジックをここに記述>

when value_is(= Update_List_Entry)
* インスタンス リストに既に存在するエントリーを更新

* <ロジックをここに記述>

when value_is(=  Delete_List_Entry)

* <ロジックをここに記述>

endcase

Endroutine
<<endif>>

End_Com
</code>  
